diff --git a/h_malloc.c b/h_malloc.c
index 3950722..24ecf52 100644
--- a/h_malloc.c
+++ b/h_malloc.c
@@ -80,6 +80,7 @@ static union {
 #ifdef MEMTAG
         bool is_memtag_disabled;
 #endif
+        bool are_block_operation_size_checks_enabled;
     };
     char padding[PAGE_SIZE];
 } ro __attribute__((aligned(PAGE_SIZE)));
@@ -1210,6 +1211,18 @@ static inline void enforce_init(void) {
     }
 }
 
+COLD static void handle_bugs(void) {
+    char path[256];
+    if (readlink("/proc/self/exe", path, sizeof(path)) == -1) {
+        return;
+    }
+
+    if (strcmp("/usr/bin/chromium-browser", path) == 0 ||
+            strcmp("/opt/Mullvad VPN/mullvad-gui", path) == 0) {
+        ro.are_block_operation_size_checks_enabled = false;
+    }
+}
+
 static struct mutex init_lock = MUTEX_INITIALIZER;
 
 COLD static void init_slow_path(void) {
@@ -1225,6 +1238,9 @@ COLD static void init_slow_path(void) {
     ro.metadata_pkey = pkey_alloc(0, 0);
 #endif
 
+    ro.are_block_operation_size_checks_enabled = true;
+    handle_bugs();
+
     if (unlikely(sysconf(_SC_PAGESIZE) != PAGE_SIZE)) {
         fatal_error("runtime page size does not match compile-time page size which is not supported");
     }
@@ -1929,10 +1945,10 @@ EXPORT void *h_memcpy(void *dst, const void *src, size_t len) {
     if(dst == src || len == 0) {
         return dst;
     }
-    if (len > malloc_object_size_fast(src)) {
+    if (len > malloc_object_size_fast(src) && ro.are_block_operation_size_checks_enabled) {
         fatal_error("memcpy read overflow");
     }
-    if (len > malloc_object_size_fast(dst)) {
+    if (len > malloc_object_size_fast(dst) && ro.are_block_operation_size_checks_enabled) {
         fatal_error("memcpy buffer overflow");
     }
     return h_memcpy_real(dst, src, len);
@@ -1942,10 +1958,10 @@ EXPORT void *h_memmove(void *dst, const void *src, size_t len) {
     if(dst == src || len == 0) {
         return dst;
     }
-    if (len > malloc_object_size_fast(src)) {
+    if (len > malloc_object_size_fast(src) && ro.are_block_operation_size_checks_enabled) {
         fatal_error("memmove read overflow");
     }
-    if (len > malloc_object_size_fast(dst)) {
+    if (len > malloc_object_size_fast(dst) && ro.are_block_operation_size_checks_enabled) {
         fatal_error("memmove buffer overflow");
     }
     return h_memmove_real(dst, src, len);
@@ -1955,7 +1971,7 @@ EXPORT void *h_memset(void *dst, int value, size_t len) {
     if(len == 0) {
         return dst;
     }
-    if (len > malloc_object_size_fast(dst)) {
+    if (len > malloc_object_size_fast(dst) && ro.are_block_operation_size_checks_enabled) {
         fatal_error("memset buffer overflow");
     }
     return h_memset_real(dst, value, len);
